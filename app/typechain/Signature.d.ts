/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SignatureInterface extends ethers.utils.Interface {
  functions: {
    "_hashAdditionalMint((address,uint256,uint256,bytes))": FunctionFragment;
    "_hashNFT((address,string,string,string,string,uint256,bytes))": FunctionFragment;
    "_hashPermit((address,address,bool,bytes))": FunctionFragment;
    "_verifyAdditionalMint((address,uint256,uint256,bytes))": FunctionFragment;
    "_verifyNFT((address,string,string,string,string,uint256,bytes))": FunctionFragment;
    "_verifyPermit((address,address,bool,bytes))": FunctionFragment;
    "getChainID()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_hashAdditionalMint",
    values: [
      {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_hashNFT",
    values: [
      {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_hashPermit",
    values: [
      {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_verifyAdditionalMint",
    values: [
      {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_verifyNFT",
    values: [
      {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_verifyPermit",
    values: [
      {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainID",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_hashAdditionalMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_hashNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_hashPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_verifyAdditionalMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_verifyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_verifyPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainID", data: BytesLike): Result;

  events: {};
}

export class Signature extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SignatureInterface;

  functions: {
    _hashAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    _hashNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    _hashPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    _verifyAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    _verifyNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    _verifyPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    getChainID(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _hashAdditionalMint(
    mint: {
      to: string;
      id: BigNumberish;
      amount: BigNumberish;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  _hashNFT(
    nft: {
      issuer: string;
      deedNo: string;
      assetID: string;
      issuerID: string;
      projectID: string;
      totalSupply: BigNumberish;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  _hashPermit(
    permit: {
      owner: string;
      spender: string;
      approved: boolean;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  _verifyAdditionalMint(
    mint: {
      to: string;
      id: BigNumberish;
      amount: BigNumberish;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  _verifyNFT(
    nft: {
      issuer: string;
      deedNo: string;
      assetID: string;
      issuerID: string;
      projectID: string;
      totalSupply: BigNumberish;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  _verifyPermit(
    permit: {
      owner: string;
      spender: string;
      approved: boolean;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  getChainID(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _hashAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    _hashNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    _hashPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    _verifyAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    _verifyNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    _verifyPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getChainID(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _hashAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _hashNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _hashPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifyAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifyNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifyPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainID(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _hashAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _hashNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _hashPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _verifyAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _verifyNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _verifyPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
