/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ERC1155TokenInterface extends ethers.utils.Interface {
  functions: {
    "_hashAdditionalMint((address,uint256,uint256,bytes))": FunctionFragment;
    "_hashNFT((address,string,string,string,string,uint256,bytes))": FunctionFragment;
    "_hashPermit((address,address,bool,bytes))": FunctionFragment;
    "_verifyAdditionalMint((address,uint256,uint256,bytes))": FunctionFragment;
    "_verifyNFT((address,string,string,string,string,uint256,bytes))": FunctionFragment;
    "_verifyPermit((address,address,bool,bytes))": FunctionFragment;
    "addToWhitelist(address)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "createToken((address,string,string,string,string,uint256,bytes))": FunctionFragment;
    "exists(uint256)": FunctionFragment;
    "fractionDetails(uint256)": FunctionFragment;
    "getChainID()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintTokens((address,uint256,uint256,bytes))": FunctionFragment;
    "owner()": FunctionFragment;
    "permit((address,address,bool,bytes))": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeBulkTransferFrom(address[],address[],uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_hashAdditionalMint",
    values: [
      {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_hashNFT",
    values: [
      {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_hashPermit",
    values: [
      {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_verifyAdditionalMint",
    values: [
      {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_verifyNFT",
    values: [
      {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "_verifyPermit",
    values: [
      {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addToWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [
      {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fractionDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTokens",
    values: [
      {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBulkTransferFrom",
    values: [string[], string[], BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "_hashAdditionalMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_hashNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_hashPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_verifyAdditionalMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_verifyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_verifyPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fractionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBulkTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CreatedNFT(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferBulk(address,address[],address[],uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreatedNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBulk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    account: string;
    operator: string;
    approved: boolean;
  }
>;

export type CreatedNFTEvent = TypedEvent<
  [BigNumber, string] & { tokenId: BigNumber; issuer: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]] & {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferBulkEvent = TypedEvent<
  [string, string[], string[], BigNumber[], BigNumber[]] & {
    operator: string;
    from: string[];
    to: string[];
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type URIEvent = TypedEvent<
  [string, BigNumber] & { value: string; id: BigNumber }
>;

export class ERC1155Token extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC1155TokenInterface;

  functions: {
    _hashAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    _hashNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    _hashPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    _verifyAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    _verifyNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    _verifyPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    addToWhitelist(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    createToken(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    fractionDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        issuer: string;
        tokenID: BigNumber;
        tokens: BigNumber;
      }
    >;

    getChainID(overrides?: CallOverrides): Promise<[BigNumber]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintTokens(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    permit(
      _permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromWhitelist(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBulkTransferFrom(
      _from: string[],
      _to: string[],
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  _hashAdditionalMint(
    mint: {
      to: string;
      id: BigNumberish;
      amount: BigNumberish;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  _hashNFT(
    nft: {
      issuer: string;
      deedNo: string;
      assetID: string;
      issuerID: string;
      projectID: string;
      totalSupply: BigNumberish;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  _hashPermit(
    permit: {
      owner: string;
      spender: string;
      approved: boolean;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  _verifyAdditionalMint(
    mint: {
      to: string;
      id: BigNumberish;
      amount: BigNumberish;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  _verifyNFT(
    nft: {
      issuer: string;
      deedNo: string;
      assetID: string;
      issuerID: string;
      projectID: string;
      totalSupply: BigNumberish;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  _verifyPermit(
    permit: {
      owner: string;
      spender: string;
      approved: boolean;
      signature: BytesLike;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  addToWhitelist(
    _issuer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  createToken(
    nft: {
      issuer: string;
      deedNo: string;
      assetID: string;
      issuerID: string;
      projectID: string;
      totalSupply: BigNumberish;
      signature: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  fractionDetails(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      issuer: string;
      tokenID: BigNumber;
      tokens: BigNumber;
    }
  >;

  getChainID(overrides?: CallOverrides): Promise<BigNumber>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintTokens(
    mint: {
      to: string;
      id: BigNumberish;
      amount: BigNumberish;
      signature: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  permit(
    _permit: {
      owner: string;
      spender: string;
      approved: boolean;
      signature: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromWhitelist(
    _issuer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBulkTransferFrom(
    _from: string[],
    _to: string[],
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalSupply(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    _hashAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    _hashNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    _hashPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    _verifyAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    _verifyNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    _verifyPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    addToWhitelist(_issuer: string, overrides?: CallOverrides): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    createToken(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    fractionDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        issuer: string;
        tokenID: BigNumber;
        tokens: BigNumber;
      }
    >;

    getChainID(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintTokens(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    permit(
      _permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromWhitelist(
      _issuer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeBulkTransferFrom(
      _from: string[],
      _to: string[],
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; operator: string; approved: boolean }
    >;

    "CreatedNFT(uint256,address)"(
      tokenId?: BigNumberish | null,
      issuer?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; issuer: string }
    >;

    CreatedNFT(
      tokenId?: BigNumberish | null,
      issuer?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { tokenId: BigNumber; issuer: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string;
        to: string;
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    "TransferBulk(address,address[],address[],uint256[],uint256[])"(
      operator?: string | null,
      from?: null,
      to?: null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string[], string[], BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string[];
        to: string[];
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    TransferBulk(
      operator?: string | null,
      from?: null,
      to?: null,
      ids?: null,
      values?: null
    ): TypedEventFilter<
      [string, string[], string[], BigNumber[], BigNumber[]],
      {
        operator: string;
        from: string[];
        to: string[];
        ids: BigNumber[];
        values: BigNumber[];
      }
    >;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        operator: string;
        from: string;
        to: string;
        id: BigNumber;
        value: BigNumber;
      }
    >;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;

    URI(
      value?: null,
      id?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { value: string; id: BigNumber }>;
  };

  estimateGas: {
    _hashAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _hashNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _hashPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifyAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifyNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _verifyPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addToWhitelist(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createToken(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exists(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fractionDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChainID(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintTokens(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      _permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromWhitelist(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBulkTransferFrom(
      _from: string[],
      _to: string[],
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    uri(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _hashAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _hashNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _hashPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _verifyAdditionalMint(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _verifyNFT(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _verifyPermit(
      permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addToWhitelist(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createToken(
      nft: {
        issuer: string;
        deedNo: string;
        assetID: string;
        issuerID: string;
        projectID: string;
        totalSupply: BigNumberish;
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fractionDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintTokens(
      mint: {
        to: string;
        id: BigNumberish;
        amount: BigNumberish;
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      _permit: {
        owner: string;
        spender: string;
        approved: boolean;
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _issuer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBulkTransferFrom(
      _from: string[],
      _to: string[],
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    uri(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
